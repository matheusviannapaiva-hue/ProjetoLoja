from time import sleep
from datetime import datetime

                                                # HIST√ìRICOS

Ha = []   # Hist√≥rico Adi√ß√£o
Hr = []   # Hist√≥rico Remo√ß√£o
Hv = []   # Hist√≥rico de Vendas

# FUN√á√ïES
def escolha_funcionarios(gerente, loja):
    print('Gerenciando funcion√°rios')
    sleep(2)
    while True:
        try:
            resposta = int(input('Deseja:  [ 1 ] Cadastrar   [ 2 ] Remover   [ 3 ] Voltar'))
            if resposta == 1:
                criar_funcionario()
                return
            elif resposta == 2:
                if len(loja.lista_de_funcionarios) == 0:
                    print('N√£o h√° funcion√°rios cadastrados!')
                gerente.remover_funcionario(loja)
                return
            elif resposta == 3:
                print('Voltando')
                sleep(1)
                return
            else:
                print(" ‚ùå Entrada inv√°lida. Digite o n√∫mero correto.")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def escolha_gerente():
    print('O que deseja fazer, gerente?')
    print('[ 1 ] Produtos')
    print('[ 2 ] Funcion√°rios')
    print('[ 3 ] Sair')
    while True:
        try:
            resposta = int(input('Qual sua escolha? '))
            if resposta == 1:
                adicionar_ou_remover(l)
                return
            elif resposta == 2:
                escolha_funcionarios(g, l)
                return
            elif resposta == 3:
                print('Saindo')
                sleep(1)
                return
            else:
                print("‚ùå Entrada inv√°lida. Digite o n√∫mero correto.")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def adicionar_ou_remover(loja):
    while True:
        try:
            r = int(input('[ 1 ] Adicionar produto   [ 2 ] Remover produto   [ 3 ] Sair '))
            if r == 1:
                criar_produto()
                return
            elif r == 2:
                n = mostrar_lista(loja.catalogo)
                loja.remover_produto(n)
                return
            elif r == 3:
                return
            else:
                print("‚ùå Entrada inv√°lida. Digite um n√∫mero correto!")

        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def mostrar_posicao(lista, msg = 'Digite um n√∫mero!'):

    '''

    Args:
        lista:

    Returns: Ir√° retornar em qual localiza√ß√£o da lista se encontra

    '''
    tot = 0
    for objeto in lista:
        print('=='*10)
        print(f'{tot} - {objeto.nome}')
        tot += 1
    print('==' * 10)
    while True:
        try:
            q = int(input(f'{msg}'))
            if q <= len(lista)- 1 and q >=0:
                return q
            else:
                print(f"‚ùå Entrada inv√°lida. Digite um n√∫mero entre 0 e {len(lista - 1)}")


        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def adicionar(onde ,qtd):
    n = l.catalogo[onde]
    n.quantidade = qtd
    return n


def mostrar_lista(lista, msg = 'Digite um n√∫mero '):
    '''

    Args:
        lista:

    Returns: Ir√° retornar o objeto dentro da lista (para ser utilizado posteriormente)

    '''
    tot = 0
    for objeto in lista:
        print('=='*10)
        print(f'{tot} - {objeto.nome}')
        tot += 1
    print('==' * 10)
    while True:
        try:
            q = int(input(f'{msg}'))
            if q <= len(lista)- 1 and q >=0:
                return lista[q]
            else:
                print(f"‚ùå Entrada inv√°lida. Digite um n√∫mero entre 0 e {len(lista) - 1}")


        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def pagamento():
    print('**'*20)
    print('[ 1 ]  D√©bito')
    print('[ 2 ]  Cr√©dito')
    print('[ 3 ]  Pix')
    print('Como deseja realizar seu pagamento? ')
    while True:
        try:
            h= int(input())
            if h > 3 or h <1:
                print("‚ùå Entrada inv√°lida. Digite um n√∫mero v√°lido.")
                if h == 1:
                    print('Voc√™ selecionou a op√ß√£o [ 1 ]')
                    print('Pagamento efetuado!üì¶')
                    sleep(2)
                    return 'D√©bito'
                    # Fica aqui um espa√ßo para posteriormente adicionar funcionalidades acerca do pagamento
                elif h == 2:
                    print('Voc√™ selecionou a op√ß√£o [ 2 ]')
                    print('Pagamento efetuado!üì¶')
                    sleep(2)
                    print('Compra finalizada! ')
                    return 'Cr√©dito'
                    # Fica aqui um espa√ßo para posteriormente adicionar funcionalidades acerca do pagamento
                elif h == 3:
                    print('Voc√™ selecionou a op√ß√£o [ 3 ]')
                    print('Pagamento efetuado!üì¶')
                    sleep(2)
                    print('Compra finalizada! ')
                    return 'Pix'
                    # Fica aqui um espa√ßo para posteriormente adicionar funcionalidades acerca do pagamento
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def finalizar_carrinho(carrinho):
    total = 0
    tot = 1
    for produto in carrinho.lista_de_produtos:
        print(f'{tot} - {produto.nome}....... Unidades: {produto.quantidade}')
        total += produto.preco
        tot += 1
    print(f'Valor total: R$:{total}')
    tot -= 1
    return total


def ver_o_carrinho(carrinho, cliente):
    if len(carrinho.lista_de_produtos) == 0:
        print('Seu carrinho est√° vazio! ')
    else:
        mostrar_carrinho(carrinho.lista_de_produtos)
        try:
            a = input('O que deseja fazer? [ 1 ] Remover produto    [ 2 ]  Voltar ')
            if a == 1:
                try:
                        o = mostrar_lista(carrinho.lista_de_produtos)
                        cliente.remover_do_carrinho(o)
                except ValueError:
                    print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")

                except TypeError:
                    print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
            elif a == 2:
                print('Voltando...')
                sleep(1)
            else:
                print("‚ùå Entrada inv√°lida. Digite um n√∫mero v√°lido.")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")

        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def ver_produtos(carrinho, cliente):
    if len(l.catalogo) == 0:
        print('O cat√°logo de produtos ainda est√° vazio, volte novamente outra hora!')
    else:
        posicao = mostrar_posicao(l.catalogo, 'Quais desses produtos deseja?')
        qtd = int(input('Quantas unidades? '))
        produto = adicionar(posicao, qtd)
        cliente.adicionar_ao_carrinho(carrinho, produto, qtd)
def mostrar_carrinho(lista):
    total = 0
    tot = 1
    for produto in lista:
        print(f'{tot} - {produto.nome}....... Unidades: {produto.quantidade}')
        total += produto.preco * produto.quantidade
        tot += 1
    print(f'Valor total: R$:{total}')
    tot -= 1
    return tot


def opcoes():
    print('O que gostaria de fazer? ')
    while True:
        print('[ 1 ] Ver nossos produtos')
        print('[ 2 ] Ver o carrinho')
        print('[ 3 ] Efetuar compra')
        print('[ 4 ] Sair da loja')
        try:
            r = int(input())

            if r == 1:
                return r

            elif r == 2:
                return r

            elif r == 3:
                return r

            elif r == 4:
                return r
        except ValueError:
            print('‚ùå Entrada inv√°lida. Digite um n√∫mero')

        except TypeError:
            print('‚ùå Entrada inv√°lida. Digite um n√∫mero')


def verificador(loja, numeroprod):
    '''

    Args:
        loja: Objeto tipo Loja
        numeroprod: Valor localizado na lista

    Returns:

    '''
    a = loja.catalogo[numeroprod]
    print('O produto que voc√™ deseja adicionar √© este?')
    print(a.nome)
    while True:
        try:
            f = int(input('[ 1 ] Sim  /  [ 2 ] N√£o'))
            if f == 1:
                return True

            elif f == 2:
                return False

            else:
                print("‚ùå Entrada inv√°lida. Digite um n√∫mero inteiro dentre as op√ß√µes.")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def opcao_cliente():
    n = criar_cliente(l.lista_de_clientes)
    c = criar_carrinho()
    while True:
        escolha = opcoes()
        if escolha == 1:
            ver_produtos(c,n)
        elif escolha == 2:
            ver_o_carrinho(c, n)

        elif escolha == 3:
            total = finalizar_carrinho(c)
            if total == 0:
                print('Para finalizar compra, adicione itens no seu carrinho!')
            else:
                tipo = pagamento()
                resumo = [total, n.nome, tipo]
                Hv.append(resumo)
                c.lista_de_produtos.clear()

        elif escolha == 4:
            print('Finalizando!')
            sleep(2)
            return 'Obrigado e volte sempre!'
        print('|='*20)


def opcao_funcionario():
    if len(l.lista_de_funcionarios) == 0:
        print(' ‚ùå A lista de funcion√°rios est√° vazia. Pe√ßa ao seu gerente para cadastrar algu√©m.')
    else:
        f = mostrar_lista(l.lista_de_funcionarios)
        while True:
            try:
                print(f'O que deseja fazer, {f.nome}?')
                adicionar_ou_remover(l)
                opt = int(input('Tem certeza?  [ 1 ] SIM   [ 2 ] N√ÉO '))
                if opt == 1:
                    print('Okay!')
                elif opt == 2:
                    print('Muito obrigado pelos seus servi√ßos!')
                    return
            except ValueError:
                print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
            except TypeError:
                print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def opcao_gerente():
    while True:
        senha = int(input('Digite sua senha num√©rica'))
        confirmar = g.senha
        if senha != confirmar:
            print(" ‚ùå Entrada inv√°lida. Digite o n√∫mero correto! ")
            sleep(2)
        else:
            break
    print('Bem vindo de volta, gerente! ')
    while True:
        try:
            escolha_gerente()
            d = int(input('Deseja sair?  [ 1 ] Sim   [ 2 ] N√£o '))
            if d == 1:
                return
            elif d == 2:
                print('Okay!')
            else:
                print(" ‚ùå Entrada inv√°lida. Digite o n√∫mero correto! ")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
        except TypeError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def saudacao():
    print('Seja muito bem-vindo!')
    print()


def funcionario_ou_cliente():
    print('Voc√™ √© um:')
    print()
    while True:
        try:
            q = int(input('[ 1 ] Cliente     [ 2 ] Funcion√°rio   [ 3 ] Gerente   [ 4 ] Sair'))
            if q == 1:
                return 1
            elif q == 2:
                return 2
            elif q == 3:
                return 3
            elif q ==4:
                return 4
            else:
                print(" ‚ùå Entrada inv√°lida. Digite um n√∫mero v√°lido.")

        except ValueError:
            print(" ‚ùå Entrada inv√°lida. Digite um n√∫mero.")

        except TypeError:
            print(" ‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def criar_cliente(lista):
    nome = Cliente(input('Qual o seu nome? '))
    lista.append(nome)
    return nome


def criar_carrinho():
    carrinho = Carrinho()
    return carrinho


def criar_funcionario():
    while True:
        try:
            nome = Funcionario(input('Qual o nome do funcion√°rio? '), int(input('Qual sua senha? ')))
            g.cadastrar_funcionario(l, nome)
            return f' üë• {nome.nome} adicionado! '
        except ValueError:
            print(" ‚ùå Entrada inv√°lida. Digite um n√∫mero.")

        except TypeError:
            print(" ‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def criar_produto():
    while True:
        try:
            n = Produto(input('Qual o nome do produto? '), float(input('Qual o pre√ßo do produto? ')))
            qtd = int(input('Quantas unidades? '))
            n.quantidade = qtd
            l.catalogo.append(n)
            print(f' üë• {n.nome} adicionado! ')
            return
        except ValueError:
            print(" ‚ùå Entrada inv√°lida. Digite um n√∫mero.")

        except TypeError:
            print(" ‚ùå Entrada inv√°lida. Digite um n√∫mero.")


def menu():
    while True:
        saudacao()
        q = funcionario_ou_cliente()
        if q == 1:
            opcao_cliente()
            print('Voltando ao menu principal...')
            sleep(2)
        elif q == 2:
            opcao_funcionario()
            print('Voltando ao menu principal...')
            sleep(2)
        elif q == 3:
            opcao_gerente()
            print('Voltando ao menu principal...')
            sleep(2)
        elif q == 4:
            print('Volte sempre! ')
            return


def data():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def historico_adicao(A, B, C):
    '''

    Args:
        A: Data
        B: Produto
        C: Quantidade

    Returns:

    '''
    Ha.append(A)
    Ha.append(B)
    Ha.append(C)


def historico_remocao(A, B):
    '''

    Args:
        A: Data
        B: Produto

    Returns:

    '''
    Hr.append(A)
    Hr.append(B)


def historico_de_vendas(A ,B ,C ,D, E ):
    '''

    Args:
        A: Data
        B: Produto
        C: Quantidade
        D: Cliente
        E: Valor
    Returns:

    '''
    Hv.append(A)
    Hv.append(B)
    Hv.append(C)
    Hv.append(D)
    Hv.append(E)


                                                    # CLASSES

class Produto:
    def __init__(self, nome = '<desconhecido>', preco = 0.0):
        self.nome = nome
        self.preco = preco
        self.quantidade = 1


class Cliente:
    def __init__(self, nome):
        self.nome = nome
        self.carrinho = None


    def adicionar_ao_carrinho(self, A, B, C):
        '''

        Args:
            A: Objeto da classe Carrinho
            B: Objeto da classe Produto
            C: Atributo quantitativo do Objeto da classe Produto

        Returns:

        '''
        self.carrinho = A
        A.lista_de_produtos.append(B)
        print(f' üëç{B.nome} adicionado ao carrinho!({C} unidades) ')

    def remover_do_carrinho(self, A, B):
        '''

        Args:
            A: Objeto da classe Carrinho
            B: Objeto da classe Produto

        Returns:

        '''
        A.lista_de_produtos.remove(B)
        print(f' üëç {B.nome} Removido do carrinho! ')


    def finalizar_compra(self, c):
        finalizar_carrinho(c)


class Carrinho:
    def __init__(self):
        self.lista_de_produtos = []
        self.total = None


class Loja:
    def __init__(self, nome = 'Loja'):
        self.nome = nome
        self.catalogo = []
        self.lista_de_clientes = []
        self.lista_de_funcionarios = []

    def adicionar_produto(self, produto):
        while True:
            try:
                qtd = int(input(f'Quantos {produto.nome} voc√™ deseja adicionar? '))
                produto.quantidade = qtd
                self.catalogo.append(produto)
                self.catalogo.append(produto)
                print(f' üëç {produto.nome} adicionado! ')
                sleep(1)
                historico_adicao(data(),produto.nome, produto.quantidade)
                return
            except TypeError:
                print(' ‚ùå Entrada inv√°lida. Digite um n√∫mero.')
                sleep(1)
            except ValueError:
                print(' ‚ùå Entrada inv√°lida. Digite um n√∫mero.')
                sleep(1)

    def remover_produto(self, produto):

        self.catalogo.remove(produto)
        print(f' üëç O {produto.nome} foi removido do sistema!  ')
        sleep(1)
        historico_remocao(data(), produto.nome)



    def receber_cliente(self, pessoa):
        self.lista_de_clientes.append(pessoa)


class Funcionario:
    def __init__(self, nome, senha):
        self.nome = nome
        self.senha = senha

    def adicionando(self, objeto):
        l.catalogo.append(objeto)

    def removendo(self, objeto):
        l.catalogo.remove(objeto)


class Gerente:
    def __init__(self, nome, senha):
        self.nome = nome
        self.senha = senha

    def cadastrar_funcionario(self, loja, funcionario):
        loja.lista_de_funcionarios.append(funcionario)

    def remover_funcionario(self, loja):
        loja.lista_de_funcionarios.remove(mostrar_lista(loja.lista_de_funcionarios))
        print('Funcion√°rio removido com sucesso!')
        sleep(1)

# Objetos

g = Gerente('Gerente', 24021999)
l = Loja()
p = Produto('Alface', 2.99)
l.catalogo.append(p)


menu()
